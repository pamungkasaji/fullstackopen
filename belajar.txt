> npx create-react-app part1
> cd part1
> npm start

belu paham
- (event) parameter

console warning :
https://stackoverflow.com/a/61442974/12250944

https://reactjs.org/docs/introducing-jsx.html

https://reactjs.org/docs/components-and-props.html

[ PART 1 ]
c. Component state, event handlers
   Complex state
      const [clicks, setClicks] = useState({
         left: 0, right: 0
      })
      const handleLeftClick = () =>
         setClicks({ ...clicks, left: clicks.left + 1 })
   Handling arrays state
      const [allClicks, setAll] = useState([])
      setAll(allClicks.concat('L'))
   Conditional rendering
   Old React
      we use the state hook to add state to our React components
      Before the addition of hooks, there was no way to add state to functional components
   Debugging React applications
      Keep the browser's developer console open at all times.
      add the React developer tools extension to add Components tab
   Rules of Hooks
      useState function and useEffect must not be called from inside of a loop, a conditional expression, or any place that is not a function defining a component
      hooks may only be called from the inside of a function body that defines a React component
   Event Handling Revisited
   Function that returns a function
      //state
      const [value, setValue] = useState(10)
      //the function
      const setToValue = (newValue) => () => {
         setValue(newValue)   }
      //event handler
      <button onClick={setToValue(0)}>reset</button>
   Passing Event Handlers to Child Components
      for example, by extracting the button into its own component
         <button onClick={props.handleClick}>   {props.text}   </button>
   Do Not Define Components Within Components
      The application still appears to work, but never define components inside of other components
	Useful Reading
   Excercise
      nice excercise
      most votes belum

[PART 2]
a Rendering a collection, modules
   JavaScript Arrays
      functional programming methods of the JavaScript array, such as find, filter, and map
      https://www.youtube.com/playlist?list=PL0zVEGEvSaeEd9hlmCXrk5yUyqUag-n84
      https://www.youtube.com/watch?v=-LFjnY1PEDA
   Rendering collections
      use map
   Key-attribute
      the elements generated by the map method, must each have a unique attribute called key
      <ul>
        {notes.map(note => 
          <li key={note.id}>  {note.content} </li>                  
        )}
      </ul>
   Map: map always creates a new array      
   Anti-pattern: don't use array indexes as keys 
   Refactoring modules
      Create a separate Note component, and define the key attribute for the Note components, and not for the li tags
      Common practice for building React app is to declare each component in their own file as an ES6-module
         add "export default Note" at the end of Note component file
         to import in index.js: import Note from './components/Note'
   When the application breaks
      Dynamically typed languages, such as JavaScript, where the compiler does not check the data type of, for instance, function variables or return values
      Use console.log for debugging
   Excercise

b Forms
   expanding Note application by allowing users to add new notes
   Filtering Displayed Elements
      conditional operator
   Exercises: Phonebook
      template string

[PART 3]
c. Getting data from server
         Create a file named db.json in the root directory of the project
         > npx json-server --port 3001 --watch db.json
      The browser as a runtime environment
         In Java the code executes line by line and stops to wait for the HTTP request
         JavaScript engines, or runtime environments, follow the asynchronous model
            this requires all IO-operations (with some exceptions) to be executed as non-blocking
            the code execution continues immediately after calling an IO function, without waiting for it to return
            When an asynchronous operation is completed, the JavaScript engine calls the event handlers registered to the operation
            Currently, JavaScript engines are single-threaded, which means that they cannot execute code in parallel
               As a result, it is a requirement in practice to use a non-blocking model for executing IO operations
               Otherwise, the browser would "freeze" during, for instance, the fetching of data from a server.
               Another consequence of this single-threaded nature of JavaScript engines is that if some code execution takes up a lot of time, the browser will get stuck for the duration of the execution
      npm
         JavaScript projects are defined using the node package manager, aka npm
         > npm install axios
         npm-commands should always be run in the project root directory,where the package.json file can be found
         > npm install json-server --save-dev
            adding "server" to package.json
            > npm run server
            To run json-server and your react app simultaneously, you may need to use two terminal windows. One to keep json-server running and the other to run react-app.
      Axios and promises
         A Promise is an object representing the eventual completion or failure of an asynchronous operation.
         A promise can have three distinct states: pending, fulfiled, rejected
         const promise = axios.get('http://localhost:3001/notes')
            to access the result of the operation represented by the promise, we must register an event handler to the promise
            axios.get('http://localhost:3001/notes').then(response => {
               const notes = response.data
               console.log(notes)   })
      Effect-hooks
         The Effect Hook lets you perform side effects in function components.
         Data fetching, setting up a subscription, and manually changing the DOM in React components are all examples of side effects.
         penjelasan proses fetching data dari server
            Understanding the order of events is critical!
      The development runtime environment
      Exercise skip dulu
d. Altering data in server
   REST



   Calling a function which changes the state causes the component to rerender.

A more complex state, debugging React apps
	Do Not Define Components Within Components